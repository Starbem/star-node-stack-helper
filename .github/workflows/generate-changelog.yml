name: Generate Changelog

on:
  push:
    tags:
      - 'v*'

jobs:
  generate-changelog:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Setup pnpm
        uses: pnpm/action-setup@v4
        with:
          version: 8.6.2

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'
          cache: 'pnpm'
          cache-dependency-path: libs/star-node-stack-helper/pnpm-lock.yaml

      - name: Generate Changelog
        id: changelog
        run: |
          # Get the previous tag
          PREVIOUS_TAG=$(git describe --tags --abbrev=0 HEAD~1 2>/dev/null || echo "")

          if [ -z "$PREVIOUS_TAG" ]; then
            # If no previous tag, get all commits
            CHANGELOG=$(git log --pretty=format:"- %s (%h)" --reverse)
          else
            # Get commits between previous tag and current tag
            CHANGELOG=$(git log --pretty=format:"- %s (%h)" --reverse ${PREVIOUS_TAG}..HEAD)
          fi

          # Filter and format commits
          FORMATTED_CHANGELOG=$(echo "$CHANGELOG" | grep -v "chore\|docs\|style\|refactor" | head -20)

          echo "changelog<<EOF" >> $GITHUB_OUTPUT
          echo "$FORMATTED_CHANGELOG" >> $GITHUB_OUTPUT
          echo "EOF" >> $GITHUB_OUTPUT

      - name: Update Release with Changelog
        uses: actions/github-script@v7
        with:
          script: |
            const { data: releases } = await github.rest.repos.listReleases({
              owner: context.repo.owner,
              repo: context.repo.repo
            });

            const latestRelease = releases.find(release => 
              release.tag_name === context.ref.replace('refs/tags/', '')
            );

            if (latestRelease) {
              const changelog = `${{ steps.changelog.outputs.changelog }}`;
              const updatedBody = latestRelease.body + '\n\n### üìù Recent Changes\n' + changelog;
              
              await github.rest.repos.updateRelease({
                owner: context.repo.owner,
                repo: context.repo.repo,
                release_id: latestRelease.id,
                body: updatedBody
              });
            }
